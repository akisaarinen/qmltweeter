This file contains some ideas for exercises that can be done with the
qmltweeter in order to learn QML. 

1. QML only
===========

1.1 Animated loading indicator for tweets
-----------------------------------------

    * Should be visible when tweets are being fetched
    * Image available at "/img/ajax-loader.gif"
    * http://doc.qt.nokia.com/latest/qml-animatedimage.html
    * For animated GIF to work, you need to use AnimatedImage.
      Alternatively, image can be animated using animations,
      http://doc.qt.nokia.com/4.7-snapshot/qml-rotationanimation.html

1.2 Add button to refresh current search results
---------------------------------------------------

    * Instead of reacting only to enter, add a button next to the search box
      for refreshing tweets
    * Implement directly to MainView.qml
    * http://doc.qt.nokia.com/4.7-snapshot/qml-mousearea.html

1.3 Extract the update-button to a QML component
---------------------------------------------------

    * Create a new QML component named 'Button' in qml/Button.qml 
    * Remember to add as a resource in "res.qrc" or it won't be available
      as a component in the QML (runtime won't find it)
    * Define own component properties (at least) for
        - text that is displayed
        - color of the text
    * Emit a 'clicked' -signal when button is clicked
    * Instead of the previous implementation directly in MainView.qml, use this
      Button-component to refresh latest search results

1.4 Throttled continuous search
-------------------------------

    * Easier version: search 500ms after user has stopped typing
    * Harder version: search every 500ms even when user is typing
    
    * http://doc.qt.nokia.com/4.7-snapshot/qml-timer.html
    * To keep focus correct, wrap the component to FocusScope. See examples at 
      http://doc.qt.nokia.com/4.7-snapshot/qdeclarativefocus.html#acquiring-focus-and-focus-scopes
    * An example: http://jryannel.wordpress.com/2010/02/18/a-textinput-component/

1.5 Extract throttled input as a QML component
----------------------------------------------

    * Extract to QML component by creating "qml/ThrottledSearchInput.qml"
    * Remember to add to 'res.qrc' as resource
    * Define your own component properties for e.g.:
        - throttle interval
        - throttledText (current text with throttling enabled)
    * Use this component for the search field with binding throttledText
      property to the searchModel

1.6 Splash screen
-----------------

    Implement an animated splash screen when the application starts.
    Transition with animation from splash to main screen after timeout or
    immediately if the splash is clicked.

1.7 Fancy graphics to about box
-------------------------------

    Implement something fancy in the about box e.g. with the particle engine or
    create fancy transitions from main view to about box etc. Check current about
    box for some examples.

1.8 Showing of current twitter trends
-------------------------------------

    Get currently trending twitter search keywords and show them in the UI. 
    Allow user to perform searches based on these trending topics.
    
    NOTE: Non-location-specific trends are only available from Twitter in
          JSON format, while QML currently doesn't provide a JsonListModel
          out-of-the-box. So we'll use the location-specific trends
          API here, because that does respond with XML too.

    * http://api.twitter.com/1/trends/44418.xml (example URL)
    * http://apiwiki.twitter.com/w/page/22554753/Twitter-REST-API-Method:-trends-location
    * Define your own XmlListModel and bind it to UI
    * See SearchModel.qml and TweetView.qml for examples of how to do it

2. QML and C++ integration
===============================================

2.1 Saving of current search term over application restarts
-----------------------------------------------------------

    * When application is started, current search term should be loaded from 
      persistent property file. Whenever use enters new search term, the current
      search term should saved to be used after next restart.
    * See http://doc.qt.nokia.com/4.7-snapshot/qdeclarativecontext.html,
      especially #contextProperty() and #setContextProperty()
    * QML and C++ interoperability: http://doc.qt.nokia.com/4.7-snapshot/qtbinding.html
